name: Lint & Test

on:
  push:
    branches: [main]
  pull_request:

jobs:
  lint-test:
    name: Lint with flake8 and test with `unittest`
    runs-on: ubuntu-latest

    env:
      # Pip configuration that allows us to easily cache the dependencies
      PIP_NO_CACHE_DIR: false
      PIP_USER: 1

      # Hide the graphical adornments of `pipenv` in the CI
      PIPENV_HIDE_EMOJIS: 1
      PIPENV_NOSPIN: 1

      # Set a specific Python Userbase directory to make caching easier
      PYTHONUSERBASE: ${{ github.workspace }}/.cache/py-user-base

    steps:
      - name: Add custom PYTHONUSERBASE to PATH
        run: echo '${{ env.PYTHONUSERBASE }}/bin/' >> $GITHUB_PATH

      # Check out the repository in a subdirectory to avoid running
      # flake8 on dependencies installed to our caching directory.
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          path: 'repository/'

      - name: Setup python
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Restore our Python dependency cache, if available.
      - name: Python Dependency Caching
        uses: actions/cache@v2
        id: python_cache
        with:
          path: ${{ env.PYTHONUSERBASE }}
          key: >-
            ${{ runner.os }}
            ${{ env.PYTHONUSERBASE }}
            ${{ steps.python.outputs.python-version }}
            ${{ hashFiles('repository//Pipfile', 'repository//Pipfile.lock') }}

      # Install the dependencies if we had a cache miss
      - name: Install dependencies using pipenv
        if: steps.python_cache.outputs.cache-hit != 'true'
        working-directory: repository/
        run: |
          pip install pipenv
          pipenv install --dev --deploy --system

      # Run flake and have it output in GitHub Actions
      # annotation syntax to add errors as annotations.
      - name: Run flake8
        working-directory: repository/
        run: >-
          python -m flake8
          --format='::error file=%(path)s,line=%(row)d,col=%(col)d::[flake8] %(code)s: %(text)s'

      - name: Run unittest with coverage.py
        working-directory: repository/
        run: |
          python -m coverage run -m unittest
          python -m coverage report -m

      - name: Publish coverage report to coveralls.io
        working-directory: repository/
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls
